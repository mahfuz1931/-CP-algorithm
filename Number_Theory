                                              // Seive primefactorization
                                              vector<int>low(1e6); 
void sieve(){
    int n = 1e6;
    for(int i = 2; i<=n; i++){
        low[i] = i;
    }

    for(int i = 2; i*i <= n; i++){
        if(low[i] == i){
            for(int j =  i*i; j<= n; j += i){
                if(low[j] == j){ 
                    low[j] = i;
                }
            }
        }
    }
}

vector<int>prime_fact(int x){
    vector<int>res;
    while (x > 1)
    {
        res.push_back(low[x]);
        x /= low[x];
    }
    return res;
}

int32_t main(){
    FastIO;
    sieve();
    int n;cin>>n;
    while (n--)
    {
        int p;cin>>p;
        vector<int>res;
        res = prime_fact(p);
        sort(all(res));
        for(auto it:res)cout<<it<<" ";
        cout<<endl;
    }
    
}
                                                                // JUST SEIVE
                                                                
   bool v[3e5+6];
   for(i=2;i*i<=h;i++)
     {
        if(v[i]==false)
        {
            for(j=i*i;j<=h;j+=i)
            v[j]=true;
        }
     } 
                                                           // Prime fact;
                                                           const int N = 300005;
int fact[N] ;
vector<int> primes;
void Sieve(){
    for (int i = 2 ; i<N ; i+=2) fact[i] = 2 ;
    primes.push_back(2);
    for (long long i = 3 ; i<N ; i+=2){
        if(fact[i]!=0)continue;
        primes.push_back(i);
        fact[i]=i;
        for (long long j = i*i ; j<N ; j+=i){
            if (fact[j] == 0) fact[j] = i ;
        }
    }
}
                                                         //COUNT DIVISOR FROM A RANGE
                                                         
                                                         
                                                         
                                                          for(int i = 1; i < N; ++i)
                                                       for(int j = i; j < N; j += i)
                                                   divisors[j]++;
                                                   
                                                   
                                                     // Segment seive
 #include <bits/stdc++.h>
using namespace std;
void simpleSieve(int lmt, vector<int>& prime) {
   bool mark[lmt + 1];
   memset(mark, false, sizeof(mark));
   for (int i = 2; i <= lmt; ++i) {
      if (mark[i] == false) {
         prime.push_back(i);
         for (int j = i; j <= lmt; j += i)
            mark[j] = true;
      }
   }
}
void PrimeInRange(int low, int high) {
   int lmt = floor(sqrt(high)) + 1;
   vector<int> prime;
   simpleSieve(lmt, prime);
   int n = high - low + 1;
   bool mark[n + 1];
   memset(mark, false, sizeof(mark));
   for (int i = 0; i < prime.size(); i++) {
      int lowLim = floor(low / prime[i]) * prime[i];
      if (lowLim < low)
         lowLim += prime[i];
      for (int j = lowLim; j <= high; j += prime[i])
         mark[j - low] = true;
   }
   for (int i = low; i <= high; i++)
      if (!mark[i - low])
         cout << i << " ";
}
int main() {
   int low = 10, high = 50;
   PrimeInRange(low, high);
   return 0;
}
